import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from scipy.stats import describe

df=pd.read_csv('concrete.csv')
print(df.head())
print(df.describe())
sns.pairplot(df,size=2.5)
plt.tight_layout()
plt.show()

cm=np.corrcoef(df.values.T)
sns.set(font_scale=1.5)
hm=sns.heatmap(cm,cbar=True,annot=True,square=True,fmt='.2f',annot_kws={'size':15},yticklabels=df.columns,xticklabels=df.columns)
plt.show()

Scaler=StandardScaler()
Scaler.fit(df)
dfstd=Scaler.transform(df)
Xstd=dfstd[:,0:8].copy()
ystd=dfstd[:,8].copy()
X_train,X_test,y_train,y_test=train_test_split(Xstd,ystd,test_size=0.2,random_state=42)

slr=LinearRegression()
slr.fit(X_train,y_train)
print('Slope:')
print(slr.coef_)
print('Intercept:')
print(slr.intercept_)
y_pred=slr.predict(X_test)
y_tpred=slr.predict(X_train)
plt.scatter(y_tpred,y_tpred-y_train,c='steelblue',marker='o',edgecolor='white',label='Training Data')
plt.scatter(y_pred,y_pred-y_test,c='limegreen',marker='s',edgecolor='white',label='Test Data')
plt.xlabel('predicted value')
plt.ylabel('residual')
plt.legend(loc='upper left')
plt.hlines(y=0, xmin=-3, xmax=3, color='black', lw=2)
plt.xlim([-3, 3])
plt.show()
print('\n')
print('The MSE of prediction is:')
print(mean_squared_error(y_test,y_pred))
print('\n')
print('The R^2 score is:')
print(r2_score(y_test,y_pred))

for i in [0.5,1,5,10]:
    ridge=Ridge(alpha=i)
    ridge.fit(X_train,y_train)
    print('\nfor alpha =',i,'\n')
    print('Slope:')
    print(ridge.coef_)
    print('Intercept:')
    print(ridge.intercept_)
    y_r_pred=ridge.predict(X_test)
    y_r_tpred=ridge.predict(X_train)
    plt.scatter(y_r_tpred,y_r_tpred-y_train,c='steelblue',marker='o',edgecolor='white',label='Training Data')
    plt.scatter(y_r_pred,y_r_pred-y_test,c='limegreen',marker='s',edgecolor='white',label='Test Data')
    plt.xlabel('predicted value')
    plt.ylabel('residual')
    plt.legend(loc='upper left')
    plt.hlines(y=0, xmin=-3, xmax=3, color='black', lw=2)
    plt.xlim([-3, 3])
    plt.show()
    print('\n')
    print('The MSE of prediction is:')
    print(mean_squared_error(y_test,y_r_pred))
    print('\n')
    print('The R^2 score is:')
    print(r2_score(y_test,y_r_pred))

for i in [0.1,0.2,0.5,1,5,10]:
    lasso=Lasso(alpha=i)
    lasso.fit(X_train,y_train)
    print('\nfor alpha =',i,'\n')
    print('Slope:')
    print(lasso.coef_)
    print('Intercept:')
    print(lasso.intercept_)
    y_l_pred=lasso.predict(X_test)
    y_l_tpred=lasso.predict(X_train)
    plt.scatter(y_l_tpred,y_l_tpred-y_train,c='steelblue',marker='o',edgecolor='white',label='Training Data')
    plt.scatter(y_l_pred,y_l_pred-y_test,c='limegreen',marker='s',edgecolor='white',label='Test Data')
    plt.xlabel('predicted value')
    plt.ylabel('residual')
    plt.legend(loc='upper left')
    plt.hlines(y=0, xmin=-3, xmax=3, color='black', lw=2)
    plt.xlim([-3, 3])
    plt.show()
    print('\n')
    print('The MSE of prediction is:')
    print(mean_squared_error(y_test,y_l_pred))
    print('\n')
    print('The R^2 score is:')
    print(r2_score(y_test,y_l_pred))

for i in [0.25,0.5,0.750]:
    enet=ElasticNet(alpha=5,l1_ratio=i)
    enet.fit(X_train,y_train)
    print('\nfor l1_ratio =',i,'\n')
    print('Slope:')
    print(enet.coef_)
    print('Intercept:')
    print(enet.intercept_)
    y_e_pred=enet.predict(X_test)
    y_e_tpred=enet.predict(X_train)
    plt.scatter(y_e_tpred,y_e_tpred-y_train,c='steelblue',marker='o',edgecolor='white',label='Training Data')
    plt.scatter(y_e_pred,y_e_pred-y_test,c='limegreen',marker='s',edgecolor='white',label='Test Data')
    plt.xlabel('predicted value')
    plt.ylabel('residual')
    plt.legend(loc='upper left')
    plt.hlines(y=0, xmin=-3, xmax=3, color='black', lw=2)
    plt.xlim([-3, 3])
    plt.show()
    print('\n')
    print('The MSE of prediction is:')
    print(mean_squared_error(y_test,y_e_pred))
    print('\n')
    print('The R^2 score is:')
    print(r2_score(y_test,y_e_pred))

print("My name is Guanhua Sun")
print("My NetID is: guanhua4")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")